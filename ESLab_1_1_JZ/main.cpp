//////////////////////////////////////////////////////////////////////////////
// Laboratory AVR Microcontrollers Part1
// Program template for C lab 21
// Please fill in this information before starting coding
// Authors:
//1. Jakub Zarêbski
//2.
//3.
//4.
// Group: 2
// Section: 2
// Task number: 12
//
// Version: 2020v1.0
//////////////////////////////////////////////////////////////////////////////
#define F_CPU 16000000L
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
// please look into header pgmspace.h functions to properly read from ROM
#include <avr/pgmspace.h>
// please change this to proper value given by the teacher
// length of ram data table
#define nLength 300
uint8_t TAB_RAM[nLength];
uint8_t TAB_RAMTMP[nLength];

//-----------this is table with data example --------------------------------------
// please correct end of this table according to the guidelines given by the teacher
uint8_t const TAB_ROM[] PROGMEM = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x1F,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x1F,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaA, 0xaB, 0xaC, 0xaD, 0xAE, 0xAF,
	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
	0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
0x00, 0x00};
//-----this empty table example-----uncomment to test---------------
// uint8_t const TAB_ROM[] PROGMEM = { 0x00, 0x00};
//Microprocessor and Embedded Systems - Laboratory
//© 2021 v2.1 AVR Microcontrollers – part I Page 26
//---------------------------------------------------------------------

void ROM_to_RAM(void) // funkcja programu
{
	volatile uint16_t romIndex = 0, ramIndex = 0, ramIndex_even = 0;
	
	PORTB |= (1<<5); //w³¹czenie B.5
	
	while (pgm_read_word(&TAB_ROM[romIndex]) != 0x0000) // sprawdzanie czy nie ma dwóch zer z rzêdu w tablicy pamiêci rom
	{
		if (ramIndex >= nLength) // zerowanie indeksu ram w przypadku skoñczenia wielkoœci tablicy
		{
			ramIndex = 0;
		}
		
		ramIndex_even = (2 * ramIndex); // parzyste indeksy ram
		TAB_RAMTMP[ramIndex_even] = pgm_read_byte(&TAB_ROM[romIndex]); // proces kopiowania
		
		romIndex++;
		ramIndex++;
	}
	PORTB &= ~(1<<5); //wy³¹czenie B.5
}

void port_init(void) // inicjalizacja portów
{
	DDRA = 0x00; // ustawienie DDRA na wejœcie
	PORTA = 0xff; // podci¹gaj¹cy rezystor
	
	DDRB = 0b11100000; // ustawienie B.7, B.6 i B.5 jako wyjœcia a pozosta³e bity jako wejœcia, zgodnie z instrukcj¹
	PORTB = 0b00011111; // wygaszenie diód, oraz podci¹gniêcie rezystorów na bitach B.4 - B.0
	
	DDRC = 0xff; // ustawienie DDRC na wyjœcie
	PORTC = 0x00; // wygaszenie diód
	
	DDRL = 0xff; // ustawienie DDRL na wyjœcie
	PORTL = 0x00; // wygaszenie diód
	
	//pozosta³e porty z aktywowanymi podci¹gaj¹cymi rezystorami
	DDRD = 0x00;
	PORTD = 0xff;
	
	DDRE = 0x00;
	PORTE = 0xff;
	
	DDRF = 0x00;
	PORTF = 0xff;
	
	DDRG = 0x00;
	PORTG = 0xff;
	
	DDRH = 0x00;
	PORTH = 0xff;
	
	DDRJ = 0x00;
	PORTJ = 0xff;
	
	DDRK = 0x00;
	PORTK = 0xff;
}

volatile uint8_t tot_overflow; //zmienna monitoruj¹ca które przerwanie siê wykonuje
void timer1_init(void)
{
	TIMSK1 = (1 << TOIE1); //w³¹czenie przerwañ licznika Timer1
	TCCR1B = (1<<CS12) | (1<<CS10); //preskaler 1024
	TCNT1 = 63583; //wartoœæ pocz¹tkowa licznika aby uzyskaæ 125ms na jedno przerwanie
	sei(); //w³¹czenie globalnych przerwañ
	tot_overflow = 0;
}

ISR(TIMER1_OVF_vect) //funkcja przerwania
{
	// instrukcje warunkowe które decyduj¹ w których z kolei przerwaniach dioda ma siê zaœwieciæ lub zgasiæ //
	if (tot_overflow <= 4 || tot_overflow >= 6)
	{
		PORTB &= ~(1<<5); //wy³¹czenie B.5
	}
	else if (tot_overflow == 5)
	{
		PORTB |= (1<<5); //w³¹czenie B.5
	}
	
	tot_overflow++;
	TCNT1 = 63583; //reset stanu pocz¹tkowego licznika po zakoñczeniu instrukcji przerwania
}

int main ()
{
	timer1_init();
	port_init();
	ROM_to_RAM();
	
	while(1)
	{
		
	}
}
